<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RetroVerse Emulator</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-dark: #1a1a1a;
            --secondary-dark: #2d2d2d;
            --accent-color: #ff4757;
            --text-light: #ffffff;
            --text-dark: #333333;
            --neon-glow: 0 0 10px rgba(255, 71, 87, 0.7);
            --card-bg: rgba(255, 255, 255, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: var(--primary-dark);
            color: var(--text-light);
            min-height: 100vh;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header Styles */
        .header {
            background: var(--secondary-dark);
            padding: 20px;
            border-bottom: 2px solid var(--accent-color);
            box-shadow: var(--neon-glow);
        }

        .logo {
            font-size: 2em;
            color: var(--accent-color);
            text-shadow: var(--neon-glow);
            margin-bottom: 20px;
        }

        /* Navigation */
        .nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .search-bar {
            background: var(--card-bg);
            padding: 10px;
            border-radius: 25px;
            display: flex;
            align-items: center;
            width: 300px;
        }

        .search-bar input {
            background: transparent;
            border: none;
            color: var(--text-light);
            padding: 5px 10px;
            width: 100%;
            outline: none;
        }

        /* Console Selection */
        .console-selector {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            overflow-x: auto;
            padding: 10px;
        }

        .console-card {
            background: var(--card-bg);
            padding: 15px 25px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 150px;
            text-align: center;
        }

        .console-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--neon-glow);
        }

        /* Game Grid */
        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .game-card {
            background: var(--card-bg);
            border-radius: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .game-card:hover {
            transform: scale(1.05);
            box-shadow: var(--neon-glow);
        }

        .game-image {
            width: 100%;
            height: 150px;
            background-size: cover;
            background-position: center;
        }

        .game-info {
            padding: 15px;
        }

        .game-title {
            font-size: 1.1em;
            margin-bottom: 5px;
        }

        .game-console {
            font-size: 0.9em;
            color: var(--accent-color);
        }

        /* Settings Panel */
        .settings-panel {
            position: fixed;
            right: -300px;
            top: 0;
            width: 300px;
            height: 100vh;
            background: var(--secondary-dark);
            padding: 20px;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .settings-panel.active {
            right: 0;
        }

        /* Controls */
        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--card-bg);
            padding: 15px;
            border-radius: 25px;
            display: flex;
            gap: 20px;
        }

        .control-btn {
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            font-size: 1.2em;
            transition: all 0.3s ease;
        }

        .control-btn:hover {
            color: var(--accent-color);
            text-shadow: var(--neon-glow);
        }

        /* Animations */
        @keyframes glow {
            0% { box-shadow: 0 0 5px var(--accent-color); }
            50% { box-shadow: 0 0 20px var(--accent-color); }
            100% { box-shadow: 0 0 5px var(--accent-color); }
        }

        .glow-effect {
            animation: glow 2s infinite;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .console-selector {
                flex-wrap: wrap;
            }
            
            .game-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1 class="logo">RetroVerse Emulator</h1>
        <div class="nav">
            <div class="search-bar">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Search games...">
            </div>
            <button class="control-btn" onclick="toggleSettings()">
                <i class="fas fa-cog"></i>
            </button>
        </div>
    </div>

    <div class="container">
        <div class="console-selector">
            <div class="console-card glow-effect">
                <i class="fas fa-gamepad"></i>
                <p>NES</p>
            </div>
            <div class="console-card">
                <i class="fas fa-gamepad"></i>
                <p>SNES</p>
            </div>
            <div class="console-card">
                <i class="fas fa-gamepad"></i>
                <p>Genesis</p>
            </div>
            <div class="console-card">
                <i class="fas fa-gamepad"></i>
                <p>PlayStation</p>
            </div>
            <div class="console-card">
                <i class="fas fa-gamepad"></i>
                <p>Game Boy</p>
            </div>
        </div>

        <div class="game-grid">
            <!-- Game Cards -->
            <div class="game-card">
                <div class="game-image" style="background-image: url('https://picsum.photos/200/150?random=1')"></div>
                <div class="game-info">
                    <h3 class="game-title">Super Mario Bros.</h3>
                    <p class="game-console">NES</p>
                </div>
            </div>
            <div class="game-card">
                <div class="game-image" style="background-image: url('https://picsum.photos/200/150?random=2')"></div>
                <div class="game-info">
                    <h3 class="game-title">Sonic the Hedgehog</h3>
                    <p class="game-console">Genesis</p>
                </div>
            </div>
            <div class="game-card">
                <div class="game-image" style="background-image: url('https://picsum.photos/200/150?random=3')"></div>
                <div class="game-info">
                    <h3 class="game-title">Final Fantasy VII</h3>
                    <p class="game-console">PlayStation</p>
                </div>
            </div>
            <div class="game-card">
                <div class="game-image" style="background-image: url('https://picsum.photos/200/150?random=4')"></div>
                <div class="game-info">
                    <h3 class="game-title">Pokemon Red</h3>
                    <p class="game-console">Game Boy</p>
                </div>
            </div>
        </div>
    </div>

    <div class="settings-panel" id="settingsPanel">
        <h2>Settings</h2>
        <div class="settings-content">
            <!-- Settings options will go here -->
        </div>
    </div>

    <div class="controls">
        <button class="control-btn"><i class="fas fa-backward"></i></button>
        <button class="control-btn"><i class="fas fa-play"></i></button>
        <button class="control-btn"><i class="fas fa-forward"></i></button>
        <button class="control-btn"><i class="fas fa-save"></i></button>
    </div>

    <script>
        // Toggle Settings Panel
        function toggleSettings() {
            const panel = document.getElementById('settingsPanel');
            panel.classList.toggle('active');
        }

        // Add hover effect to console cards
        document.querySelectorAll('.console-card').forEach(card => {
            card.addEventListener('mouseover', () => {
                document.querySelectorAll('.console-card').forEach(c => c.classList.remove('glow-effect'));
                card.classList.add('glow-effect');
            });
        });

        // Add click effect to game cards
        document.querySelectorAll('.game-card').forEach(card => {
            card.addEventListener('click', () => {
                // Add game launch logic here
                console.log('Launching game:', card.querySelector('.game-title').textContent);
            });
        });

        // Search functionality
        const searchInput = document.querySelector('.search-bar input');
        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const gameCards = document.querySelectorAll('.game-card');
            
            gameCards.forEach(card => {
                const title = card.querySelector('.game-title').textContent.toLowerCase();
                const console = card.querySelector('.game-console').textContent.toLowerCase();
                
                if (title.includes(searchTerm) || console.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        // Add keyboard controls
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'Escape':
                    document.getElementById('settingsPanel').classList.remove('active');
                    break;
                // Add more keyboard shortcuts as needed
            }
        });
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RetroVerse Emulator - Save States</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Previous styles remain the same */
        /* Adding new styles for save states */
        .save-state-panel {
            position: fixed;
            left: -350px;
            top: 0;
            width: 350px;
            height: 100vh;
            background: var(--secondary-dark);
            padding: 20px;
            transition: all 0.3s ease;
            z-index: 1000;
            overflow-y: auto;
        }

        .save-state-panel.active {
            left: 0;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
        }

        .save-state-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--accent-color);
        }

        .save-state-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .save-state-item {
            background: var(--card-bg);
            border-radius: 10px;
            padding: 15px;
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 15px;
            align-items: center;
            transition: all 0.3s ease;
        }

        .save-state-item:hover {
            transform: translateX(5px);
            box-shadow: var(--neon-glow);
        }

        .save-state-thumbnail {
            width: 80px;
            height: 60px;
            border-radius: 5px;
            background-size: cover;
            background-position: center;
        }

        .save-state-info {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .save-state-title {
            font-size: 1em;
            font-weight: bold;
        }

        .save-state-date {
            font-size: 0.8em;
            color: #888;
        }

        .save-state-actions {
            display: flex;
            gap: 10px;
        }

        .save-state-btn {
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            padding: 5px;
            transition: all 0.3s ease;
        }

        .save-state-btn:hover {
            color: var(--accent-color);
            transform: scale(1.1);
        }

        .quick-save-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--accent-color);
            color: var(--text-light);
            padding: 15px 25px;
            border-radius: 10px;
            transform: translateX(200%);
            transition: transform 0.3s ease;
            z-index: 2000;
        }

        .quick-save-notification.active {
            transform: translateX(0);
        }

        .create-save-state {
            background: var(--accent-color);
            color: var(--text-light);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .create-save-state:hover {
            transform: scale(1.05);
            box-shadow: var(--neon-glow);
        }

        .save-state-empty {
            text-align: center;
            padding: 20px;
            color: #888;
        }

        /* Keyboard shortcuts display */
        .keyboard-shortcuts {
            position: absolute;
            bottom: 20px;
            left: 20px;
            font-size: 0.8em;
            color: #888;
        }

        .keyboard-shortcuts kbd {
            background: var(--card-bg);
            padding: 2px 6px;
            border-radius: 3px;
            margin: 0 3px;
        }

        /* Save state preview */
        .save-state-preview {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: var(--secondary-dark);
            padding: 20px;
            border-radius: 15px;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            max-width: 80vw;
            width: 600px;
        }

        .save-state-preview.active {
            opacity: 1;
            visibility: visible;
            transform: translate(-50%, -50%) scale(1);
        }

        .preview-image {
            width: 100%;
            height: 300px;
            background-size: cover;
            background-position: center;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .preview-info {
            margin-bottom: 20px;
        }

        .preview-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .preview-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .preview-btn.load {
            background: var(--accent-color);
            color: var(--text-light);
        }

        .preview-btn.cancel {
            background: #666;
            color: var(--text-light);
        }

        .preview-btn:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <!-- Previous content remains the same -->

    <!-- Save States Panel -->
    <div class="save-state-panel" id="saveStatePanel">
        <div class="save-state-header">
            <h2>Save States</h2>
            <button class="save-state-btn" onclick="toggleSaveStates()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <button class="create-save-state" onclick="createSaveState()">
            <i class="fas fa-plus"></i> Create New Save State
        </button>
        <div class="save-state-list" id="saveStateList">
            <!-- Save states will be populated here -->
        </div>
        <div class="keyboard-shortcuts">
            <p>Quick Save: <kbd>F5</kbd> | Quick Load: <kbd>F7</kbd></p>
        </div>
    </div>

    <!-- Quick Save Notification -->
    <div class="quick-save-notification" id="quickSaveNotification">
        State saved successfully!
    </div>

    <!-- Save State Preview -->
    <div class="save-state-preview" id="saveStatePreview">
        <div class="preview-image" id="previewImage"></div>
        <div class="preview-info">
            <h3 id="previewTitle"></h3>
            <p id="previewDate"></p>
        </div>
        <div class="preview-actions">
            <button class="preview-btn cancel" onclick="closePreview()">Cancel</button>
            <button class="preview-btn load" onclick="loadState()">Load State</button>
        </div>
    </div>

    <script>
        // Save States Management
        let saveStates = [];
        let currentGameState = null;
        let currentStateId = null;

        // Initialize save states from localStorage
        function initializeSaveStates() {
            const savedStates = localStorage.getItem('retroverse_savestates');
            if (savedStates) {
                saveStates = JSON.parse(savedStates);
                updateSaveStateList();
            }
        }

        // Create a new save state
        function createSaveState() {
            const newState = {
                id: Date.now(),
                title: `Save State ${saveStates.length + 1}`,
                date: new Date().toLocaleString(),
                thumbnail: `https://picsum.photos/200/150?random=${saveStates.length + 1}`,
                gameState: captureGameState()
            };

            saveStates.unshift(newState);
            saveToDisk();
            updateSaveStateList();
            showQuickSaveNotification();
        }

        // Capture current game state (mock function)
        function captureGameState() {
            // In a real emulator, this would capture the actual game state
            return {
                memory: "mock_memory_dump",
                timestamp: Date.now(),
                gameInfo: {
                    title: "Current Game",
                    console: "NES"
                }
            };
        }

        // Update the save state list in the UI
        function updateSaveStateList() {
            const container = document.getElementById('saveStateList');
            container.innerHTML = '';

            if (saveStates.length === 0) {
                container.innerHTML = `
                    <div class="save-state-empty">
                        <i class="fas fa-save fa-2x"></i>
                        <p>No save states yet</p>
                    </div>
                `;
                return;
            }

            saveStates.forEach(state => {
                const stateElement = document.createElement('div');
                stateElement.className = 'save-state-item';
                stateElement.innerHTML = `
                    <div class="save-state-thumbnail" style="background-image: url('${state.thumbnail}')"></div>
                    <div class="save-state-info">
                        <div class="save-state-title">${state.title}</div>
                        <div class="save-state-date">${state.date}</div>
                    </div>
                    <div class="save-state-actions">
                        <button class="save-state-btn" onclick="previewState(${state.id})">
                            <i class="fas fa-play"></i>
                        </button>
                        <button class="save-state-btn" onclick="deleteState(${state.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                container.appendChild(stateElement);
            });
        }

        // Preview a save state
        function previewState(id) {
            const state = saveStates.find(s => s.id === id);
            if (!state) return;

            currentStateId = id;
            const preview = document.getElementById('saveStatePreview');
            const previewImage = document.getElementById('previewImage');
            const previewTitle = document.getElementById('previewTitle');
            const previewDate = document.getElementById('previewDate');

            previewImage.style.backgroundImage = `url('${state.thumbnail}')`;
            previewTitle.textContent = state.title;
            previewDate.textContent = state.date;

            preview.classList.add('active');
        }

        // Close preview
        function closePreview() {
            document.getElementById('saveStatePreview').classList.remove('active');
            currentStateId = null;
        }

        // Load state
        function loadState() {
            if (currentStateId === null) return;

            const state = saveStates.find(s => s.id === currentStateId);
            if (!state) return;

            // In a real emulator, this would restore the game state
            console.log('Loading state:', state.gameState);
            closePreview();
            showNotification('State loaded successfully!');
        }

        // Delete state
        function deleteState(id) {
            if (!confirm('Are you sure you want to delete this save state?')) return;

            saveStates = saveStates.filter(state => state.id !== id);
            saveToDisk();
            updateSaveStateList();
            showNotification('State deleted successfully!');
        }

        // Save states to disk (localStorage)
        function saveToDisk() {
            localStorage.setItem('retroverse_savestates', JSON.stringify(saveStates));
        }

        // Toggle save states panel
        function toggleSaveStates() {
            document.getElementById('saveStatePanel').classList.toggle('active');
        }

        // Show quick save notification
        function showQuickSaveNotification() {
            const notification = document.getElementById('quickSaveNotification');
            notification.classList.add('active');
            setTimeout(() => {
                notification.classList.remove('active');
            }, 2000);
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'F5') {
                e.preventDefault();
                createSaveState();
            } else if (e.key === 'F7') {
                e.preventDefault();
                if (saveStates.length > 0) {
                    previewState(saveStates[0].id);
                }
            }
        });

        // Initialize on load
        window.addEventListener('load', initializeSaveStates);

        // Add save state button to controls
        document.querySelector('.controls').innerHTML += `
            <button class="control-btn" onclick="toggleSaveStates()">
                <i class="fas fa-save"></i>
            </button>
        `;
    </script>
</body>
</html>
